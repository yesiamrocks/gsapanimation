{"version":3,"file":"gsapanimation.umd.min.js","sources":["../tools/gsap-animation-map.js","../src/animations/FadeIn.js","../src/animations/FadeInLeft.js","../src/animations/FadeInRight.js","../tools/gsap-letteranimation.js","../src/gsapanimation.js"],"sourcesContent":["/**\n * Auto-generated animation map from ./src/animations\n * Run this file before building: npm run generate:map\n * \n * This file maps animation names (e.g., 'bounce') to exported GSAP functions (e.g., animateBounce).\n * DO NOT EDIT MANUALLY — instead, edit animation files in /src/animations/\n */\n\nimport { animateFadeIn } from '../src/animations/FadeIn.js';\nimport { animateFadeInLeft } from '../src/animations/FadeInLeft.js';\nimport { animateFadeInRight } from '../src/animations/FadeInRight.js';\n\nexport const animationMap = {\n  'ca__gx-FadeIn': animateFadeIn,\n  'ca__gx-FadeInLeft': animateFadeInLeft,\n  'ca__gx-FadeInRight': animateFadeInRight,\n};\n","/**\r\n * Fade-in animation using gsap.fromTo() if both from/to are provided,\r\n * or fallback from { opacity: 0 } to defaultTo.\r\n *\r\n * @param {HTMLElement | Element[] | NodeList} el - Target element(s)\r\n * @param {Object} [options={}] - GSAP animation options\r\n */\r\nexport function animateFadeIn(el, options = {}) {\r\n    const from = options.from || null;\r\n    const to = options.to || null;\r\n\r\n    const defaultFrom = { opacity: 0 };\r\n    const defaultTo = {\r\n        opacity: 1,\r\n        duration: 1,\r\n        ease: 'power1.out',\r\n        stagger: 0.05,\r\n    };\r\n\r\n    // Helper to clean up after animation\r\n    const cleanup = () => {\r\n        if (el instanceof NodeList || Array.isArray(el)) {\r\n            removeLetterAnimationHints(el);\r\n        } else {\r\n            el.style.willChange = 'auto';\r\n            el.style.backfaceVisibility = '';\r\n            el.style.transformStyle = '';\r\n        }\r\n    };\r\n\r\n    if (from && to) {\r\n        gsap.fromTo(el, from, {\r\n            ...defaultTo,\r\n            ...to,\r\n            onComplete: () => {\r\n                cleanup();\r\n                to?.onComplete?.(); // if user passed onComplete\r\n            },\r\n        });\r\n    } else if (!from && (to || Object.keys(options).length > 0)) {\r\n        const finalTo = {\r\n            ...defaultTo,\r\n            ...(to || options),\r\n            onComplete: () => {\r\n                cleanup();\r\n                options?.onComplete?.();\r\n            },\r\n        };\r\n\r\n        if (\r\n            typeof options.from === 'undefined' &&\r\n            typeof options.fromOpacity === 'undefined' &&\r\n            typeof options.opacity === 'undefined'\r\n        ) {\r\n            gsap.set(el, { opacity: 0 });\r\n        } else if (options.fromOpacity !== undefined) {\r\n            gsap.set(el, { opacity: options.fromOpacity });\r\n        }\r\n\r\n        gsap.to(el, finalTo);\r\n    } else {\r\n        gsap.fromTo(el, defaultFrom, {\r\n            ...defaultTo,\r\n            onComplete: () => {\r\n                cleanup();\r\n            },\r\n        });\r\n    }\r\n\r\n    console.log('[cssanimation.io] ✅ animateFadeIn applied:', el);\r\n}\r\n","/**\r\n * GSAP version of `fadeInLeft` animation.\r\n *\r\n * @param {HTMLElement | Element[] | NodeList} el - Target element(s)\r\n * @param {Object} [options={}] - Optional GSAP overrides (from, to, etc.)\r\n */\r\nexport function animateFadeInLeft(el, options = {}) {\r\n    const from = options.from || null;\r\n    const to = options.to || null;\r\n\r\n    const defaultFrom = {\r\n        opacity: 0,\r\n        x: '-100%',\r\n    };\r\n\r\n    const defaultTo = {\r\n        opacity: 1,\r\n        x: 0,\r\n        duration: 0.8,\r\n        ease: 'power3.out',\r\n        stagger: 0.05,\r\n    };\r\n\r\n    // Cleanup function\r\n    const cleanup = () => {\r\n        if (el instanceof NodeList || Array.isArray(el)) {\r\n            removeLetterAnimationHints(el);\r\n        } else {\r\n            el.style.willChange = 'auto';\r\n            el.style.backfaceVisibility = '';\r\n            el.style.transformStyle = '';\r\n        }\r\n    };\r\n\r\n    if (from && to) {\r\n        gsap.fromTo(el, from, {\r\n            ...defaultTo,\r\n            ...to,\r\n            onComplete: () => {\r\n                cleanup();\r\n                to?.onComplete?.();\r\n            },\r\n        });\r\n    } else if (!from && (to || Object.keys(options).length > 0)) {\r\n        const finalTo = {\r\n            ...defaultTo,\r\n            ...(to || options),\r\n            onComplete: () => {\r\n                cleanup();\r\n                options?.onComplete?.();\r\n            },\r\n        };\r\n\r\n        if (\r\n            typeof options.from === 'undefined' &&\r\n            typeof options.fromOpacity === 'undefined' &&\r\n            typeof options.opacity === 'undefined'\r\n        ) {\r\n            gsap.set(el, { ...defaultFrom });\r\n        } else if (options.fromOpacity !== undefined) {\r\n            gsap.set(el, { opacity: options.fromOpacity });\r\n        }\r\n\r\n        gsap.to(el, finalTo);\r\n    } else {\r\n        gsap.fromTo(el, defaultFrom, {\r\n            ...defaultTo,\r\n            onComplete: cleanup,\r\n        });\r\n    }\r\n\r\n    console.log('[cssanimation.io] ✅ animateFadeInLeft applied:', el);\r\n}\r\n","/**\r\n * GSAP version of `fadeInRight` animation.\r\n * Equivalent to:\r\n *   from { opacity: 0; transform: translateX(100%) }\r\n *   to   { opacity: 1; }\r\n *\r\n * @param {HTMLElement | Element[] | NodeList} el - Target element(s)\r\n * @param {Object} [options={}] - Optional GSAP overrides (from, to, etc.)\r\n */\r\nexport function animateFadeInRight(el, options = {}) {\r\n    const from = options.from || null;\r\n    const to = options.to || null;\r\n\r\n    const defaultFrom = {\r\n        opacity: 0,\r\n        x: '100%',\r\n    };\r\n\r\n    const defaultTo = {\r\n        opacity: 1,\r\n        x: 0,\r\n        duration: 0.8,\r\n        ease: 'power3.out',\r\n        stagger: 0.05,\r\n    };\r\n\r\n    const cleanup = () => {\r\n        if (el instanceof NodeList || Array.isArray(el)) {\r\n            removeLetterAnimationHints(el);\r\n        } else {\r\n            el.style.willChange = 'auto';\r\n            el.style.backfaceVisibility = '';\r\n            el.style.transformStyle = '';\r\n        }\r\n    };\r\n\r\n    if (from && to) {\r\n        gsap.fromTo(el, from, {\r\n            ...defaultTo,\r\n            ...to,\r\n            onComplete: () => {\r\n                cleanup();\r\n                to?.onComplete?.();\r\n            },\r\n        });\r\n    } else if (!from && (to || Object.keys(options).length > 0)) {\r\n        const finalTo = {\r\n            ...defaultTo,\r\n            ...(to || options),\r\n            onComplete: () => {\r\n                cleanup();\r\n                options?.onComplete?.();\r\n            },\r\n        };\r\n\r\n        if (\r\n            typeof options.from === 'undefined' &&\r\n            typeof options.fromOpacity === 'undefined' &&\r\n            typeof options.opacity === 'undefined'\r\n        ) {\r\n            gsap.set(el, { ...defaultFrom });\r\n        } else if (options.fromOpacity !== undefined) {\r\n            gsap.set(el, { opacity: options.fromOpacity });\r\n        }\r\n\r\n        gsap.to(el, finalTo);\r\n    } else {\r\n        gsap.fromTo(el, defaultFrom, {\r\n            ...defaultTo,\r\n            onComplete: cleanup,\r\n        });\r\n    }\r\n\r\n    console.log('[cssanimation.io] ✅ animateFadeInRight applied:', el);\r\n}\r\n","/**\r\n * Wraps each character of the element’s textContent in a span\r\n * for GSAP-based letter animations based on ca__gx-lt mode.\r\n *\r\n * Supported modes:\r\n * - ca__gx-lt=\"sequence\"\r\n * - ca__gx-lt=\"reverse\"\r\n * - ca__gx-lt=\"random\"\r\n *\r\n * @param {HTMLElement} el - Target element\r\n * @param {string} spanClass - Class to apply to each span\r\n * @returns {Element[]} - Array of span-wrapped letters in the correct animation order\r\n */\r\nexport function wrapLettersIfNeeded(el, spanClass = 'ca__gsap-letter') {\r\n    const mode = el.getAttribute('ca__gx-lt'); // sequence | reverse | random\r\n    if (!mode) return el.childNodes;\r\n\r\n    injectLetterCSS(spanClass); // inject CSS rule once\r\n\r\n    const text = el.textContent.trim();\r\n    const chars = [...text];\r\n\r\n    el.innerHTML = chars\r\n        .map((char) =>\r\n            char === ' ' ? ' ' : `<span class=\"${spanClass}\">${char}</span>`,\r\n        )\r\n        .join('');\r\n\r\n    const spans = el.querySelectorAll(`.${spanClass}`);\r\n\r\n    applyAnimationHints(spans); // apply inline GPU-friendly styles\r\n\r\n    switch (mode) {\r\n        case 'random':\r\n            return shuffleNodeList(spans);\r\n        case 'reverse':\r\n            return Array.from(spans).reverse();\r\n        default:\r\n            return Array.from(spans); // \"sequence\"\r\n    }\r\n}\r\n\r\n/**\r\n * Shuffles a NodeList and returns a shuffled array of elements\r\n */\r\nfunction shuffleNodeList(nodeList) {\r\n    const array = Array.from(nodeList);\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\n\r\n/**\r\n * Injects required layout CSS rule (only once)\r\n */\r\nfunction injectLetterCSS(spanClass) {\r\n    const styleId = '__ca__gsap_letter_style__';\r\n    if (document.getElementById(styleId)) return;\r\n\r\n    const style = document.createElement('style');\r\n    style.id = styleId;\r\n    style.textContent = `\r\n    .${spanClass} {\r\n      display: inline-block;\r\n    }\r\n  `;\r\n    document.head.appendChild(style);\r\n}\r\n\r\n/**\r\n * Apply inline animation performance styles to each span\r\n */\r\nfunction applyAnimationHints(spans) {\r\n    spans.forEach((el) => {\r\n        el.style.willChange = 'transform, opacity';\r\n        el.style.backfaceVisibility = 'hidden';\r\n        el.style.transformStyle = 'preserve-3d';\r\n    });\r\n}\r\n\r\n/**\r\n * Optional helper: cleanup styles after animation completes\r\n */\r\nexport function removeLetterAnimationHints(spans) {\r\n    spans.forEach((el) => {\r\n        el.style.willChange = 'auto';\r\n        el.style.backfaceVisibility = '';\r\n        el.style.transformStyle = '';\r\n    });\r\n}\r\n","import { animationMap } from '../tools/gsap-animation-map.js';\r\nimport { wrapLettersIfNeeded } from '../tools/gsap-letteranimation.js';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    injectGlobalGsapAnimationStyles(); // inject for non-letter animations\r\n\r\n    const animatedElements = document.querySelectorAll('[ca-gsap]');\r\n\r\n    animatedElements.forEach((el) => {\r\n        const animationName = el.getAttribute('ca-gsap');\r\n        const animateFn = animationMap[animationName];\r\n\r\n        if (typeof animateFn !== 'function') {\r\n            console.warn(\r\n                `[cssanimation.io] ⚠️ Unknown animation: \"${animationName}\" not found in animationMap.`\r\n            );\r\n            el.style.outline = '2px dashed orange';\r\n            el.setAttribute('title', `Unknown animation: \"${animationName}\"`);\r\n            return;\r\n        }\r\n\r\n        let options = {};\r\n        const raw = el.getAttribute('ca-gsap-options');\r\n        const hasOptions = Boolean(raw);\r\n\r\n        if (hasOptions) {\r\n            try {\r\n                options = JSON.parse(raw);\r\n            } catch (err) {\r\n                console.group(\r\n                    `[cssanimation.io] ❌ Invalid JSON in ca-gsap-options`\r\n                );\r\n                console.warn(`Element:`, el);\r\n                console.warn(`→ Received: ${raw}`);\r\n                console.warn(`→ Error: ${err.message}`);\r\n                console.info(`💡 Fix the JSON format. Examples:`);\r\n                console.info(`✅ '{\"y\": 30, \"duration\": 1.5}'`);\r\n                console.groupEnd();\r\n                el.style.outline = '3px dashed red';\r\n                el.setAttribute('title', 'Invalid JSON in ca-gsap-options');\r\n                return;\r\n            }\r\n        }\r\n\r\n        const isLetter = el.hasAttribute('ca__gx-lt');\r\n        const target = isLetter\r\n            ? wrapLettersIfNeeded(el, 'ca__gsap-letter')\r\n            : el;\r\n\r\n        if (!isLetter) {\r\n            // Inject target-safe styles if not using letter animation\r\n            el.style.willChange = 'transform, opacity';\r\n            el.style.backfaceVisibility = 'hidden';\r\n            el.style.transformStyle = 'preserve-3d';\r\n        }\r\n\r\n        if (hasOptions && options.from && options.to) {\r\n            gsap.fromTo(target, options.from, options.to);\r\n        } else if (hasOptions && !options.from) {\r\n            gsap.to(target, options);\r\n        } else {\r\n            animateFn(target);\r\n        }\r\n\r\n        console.log(`[cssanimation.io] ✅ '${animationName}' applied`, el);\r\n    });\r\n});\r\n\r\n/**\r\n * Injects a general animation style block for non-letter animations\r\n * (optional — in case you want shared base styles for future control)\r\n */\r\nfunction injectGlobalGsapAnimationStyles() {\r\n    const styleId = '__ca__gsap_global_anim_style__';\r\n    if (document.getElementById(styleId)) return;\r\n\r\n    const style = document.createElement('style');\r\n    style.id = styleId;\r\n    style.textContent = `\r\n    [ca-gsap]:not([ca__gx-lt]) {\r\n      will-change: transform, opacity;\r\n      backface-visibility: hidden;\r\n      transform-style: preserve-3d;\r\n    }\r\n  `;\r\n    document.head.appendChild(style);\r\n}\r\n"],"names":["animationMap","el","options","arguments","length","undefined","from","to","defaultFrom","opacity","defaultTo","duration","ease","stagger","cleanup","NodeList","Array","isArray","removeLetterAnimationHints","style","willChange","backfaceVisibility","transformStyle","gsap","fromTo","onComplete","Object","keys","finalTo","fromOpacity","set","console","log","x","wrapLettersIfNeeded","spanClass","mode","getAttribute","childNodes","styleId","document","getElementById","createElement","id","textContent","head","appendChild","injectLetterCSS","chars","trim","innerHTML","map","char","join","spans","querySelectorAll","forEach","applyAnimationHints","nodeList","array","i","j","Math","floor","random","shuffleNodeList","reverse","addEventListener","injectGlobalGsapAnimationStyles","animationName","animateFn","warn","outline","setAttribute","raw","hasOptions","Boolean","JSON","parse","err","group","message","info","groupEnd","isLetter","hasAttribute","target"],"mappings":"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"}